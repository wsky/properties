@{
    ViewBag.Title = "Table";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var label = new string[] { "label-success", "label-warning", "label-important", "label-info", "label-inverse" };
    var app = ViewBag.App as Properties.Model.Application;
    var c = ViewBag.Configuration as Properties.Model.Configuration;
    var properties = c.GetProperties();
}

@section Head{
    <style type="text/css">
        form { margin:0; padding:0; }
        div.row div.span2
        {
            padding: 5px;
            overflow: hidden;
            text-overflow: ellipsis;
            line-height:25px;
            max-height:50px;
            word-break:break-all;
        }
        div.row div.span2 { cursor:pointer;}
        div.row div.span2 a { text-decoration:none; color:#232323 }
        .pop-title { color:#d14; }
        .pop-content { line-height:25px; word-break:break-all }
        div.modal form textarea { height:100px; width:95% }
        div.modal form input[type=text] { width:95%}
        
        div#uncommitted .alert{ line-height:30px; }
        div#uncommitted span.from,div#uncommitted span.to{ 
        	display:inline-block; max-width:200px;
        	overflow:hidden;text-overflow: ellipsis; word-break:break-all;
        }
    </style>
}
<header>
    <h1><a href="@Url.Config(c)">@c.Name</a></h1>
    <p class="lead">@c.Description
    @for (var i = 0; i < c.Flags.Count(); i++)
    { 
        <span class="label @label[i % 5]">@c.Flags.ElementAt(i)</span>    
    }
    @using (Html.BeginForm())
    {
    <div class="btn-toolbar">
        <div class="btn-group">
            <a class="btn" href="#edit_config" data-toggle="modal">
                <i class="icon-cog"></i>
                Edit
            </a>
        </div>
        <div class="btn-group">
            <button class="btn btn-success" name="btn" value="CommitAll" onclick="return confirm('Are you sure to commit all changes?')">
                <i class="icon-upload"></i>
                Commit All
            </button>
        </div>
        <div class="btn-group">
            <a class="btn btn-danger" href="#edit_drop" data-toggle="modal">
                <i class="icon-trash"></i>
                Drop Configuration
            </a>
        </div>
    </div>
    }
    </p>

    <div class="alert">PS: you must committed changes after updating properties. </div>
</header>
<div class="tabbable">
  <ul class="nav nav-tabs">
    <li class="active"><a href="#properties" data-toggle="tab"><i class="icon-list-alt"></i> Properties</a></li>
    <li><a href="#uncommitted" data-toggle="tab"><i class="icon-info-sign"></i> Uncommitted</a></li>
    <li><a href="#logs" data-toggle="tab"><i class="icon-th-list"></i> Logs</a></li>
    <li><a href="#trashed" data-toggle="tab"><i class="icon-trash"></i> Trashed</a></li>
  </ul>
  <div class="tab-content">
    <div class="tab-pane active" id="properties">
        @using (Html.BeginForm())
        {
            <div class="input-append control-group">
                @Html.Hidden("id", c.ID)
                <input type="text" name="name" placeholder="property name" /><button type="submit" class="btn" onclick="return check()"><i class="icon-plus"></i>&nbsp;New Property</button>
            </div>
        }
        @{ Html.RenderPartial("PropertiesRegion", false, ViewData); }
    </div>
    <div class="tab-pane" id="uncommitted">
        @using (Html.BeginForm())
        {
            @Html.Hidden("id", c.ID)
            <button class="btn" name="btn" value="Commit" onclick="return confirm('Are you sure to commit selected changes?')">
                <i class="icon-upload"></i>
                Commit Selected
            </button>
            <br /><br />
            <ul class="nav nav-tabs nav-stacked">
                @foreach (var k in c.Properties)
                {
                    var p = c.GetProperty(k);
                    if (p.HaveChanges())
                    {
                        <li>
                            <a>
                                <label>
                                    <input type="checkbox" name="cb" value="@p.Name" />
                                    <code>@p.Name</code> has uncommitted changes
                                    @if (p.LastCommitTime.HasValue)
                                    {
                                        <span>, and last committed at </span>
                                        <span class="badge">@p.LastCommitTime</span>
                                    }
                                    else 
                                    { 
                                        <span>, and never committed before. </span>
                                    }

                                    <br />
                                    <br />
                                    <div class="alert alert-info">
                                    @if (p.Uncommitted().IsTrashed != p.Committed().IsTrashed)
                                    {
                                        if (p.Uncommitted().IsTrashed)
                                        {
                                            <span><i class="icon-trash"></i> Mark as Trashed</span>
                                            <br />
                                        }
                                        else
                                        {
                                            <span>resotre from Trashed</span>
                                            <br />
                                        }
                                    }

                                    @if (p.Uncommitted().Value != p.Committed().Value)
                                    {
                                        <i class="icon-edit"></i>
                                        <span>update Value</span>
                                        if (!string.IsNullOrWhiteSpace(p.Committed().Value))
                                        {
                                            <span>from</span>
                                            <span class="label label-important from" title="@p.Committed().Value">@p.Committed().Value</span>
                                        }
                                        <span>to</span>
                                        <span class="label label-inverse to" title="@p.Uncommitted().Value">@p.Uncommitted().Value</span>
                                        <br />
                                    }
                                    @for (var i = 0; i < c.Flags.Count(); i++)
                                    {
                                        var f = c.Flags.ElementAt(i);
                                        if (p.Uncommitted()[f] != p.Committed()[f])
                                        {
                                            <i class="icon-edit"></i>
                                            <span>update Flag</span>
                                            <span class='label @label[i % 5]'>@f</span>
                                            <span>'s value</span>
                                            if (!string.IsNullOrWhiteSpace(p.Committed()[f]))
                                            {
                                                <span>from</span>
                                                <span class="label label-important from" title="@p.Committed()[f]">@p.Committed()[f]</span>
                                            }
                                            <span>to</span>
                                            <span class="label label-inverse to" title="@p.Uncommitted()[f]">@p.Uncommitted()[f]</span>
                                            <br />
                                        }
                                    }
                                    </div>
                                </label>
                            </a>
                        </li>
                    }
                }
            </ul>
        }
    </div>
    <div class="tab-pane" id="logs">
        <ul class="nav nav-tabs nav-stacked">
            <li>
                <a>
                    <button class="btn"><i class="icon-repeat"></i></button>
                    <span class="badge">2012-10-10</span>
                    wsky change
                    <code>key:Debug</code> from <span class="label label-important">1</span> to <span class="label label-success">1</span>
                </a>
            </li>
            <li>
                <a>
                    <button class="btn"><i class="icon-repeat"></i></button>
                    <span class="badge">2012-10-10</span>
                    wsky change
                    <code>key</code> from <span class="label label-important">1</span> to <span class="label label-success">1</span>
                </a>
            </li>
        </ul>
    </div>
    <div class="tab-pane" id="trashed">
        @{ Html.RenderPartial("PropertiesRegion", true, ViewData); }
    </div>
  </div>
</div>

<div class="modal hide" id="edit_drop">
    @using (Html.BeginForm())
    {
        <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal">
                ×</button>
            <h3>
                Drop Configuration ?</h3>
        </div>
        <div class="modal-body">
            <p class="alert alert-error">
                <strong>Confirm?</strong>
            </p>
        </div>
        <div class="modal-footer">
            <a class="btn" data-dismiss="modal">Cancel</a> 
            <button type="submit" name="btn" value="DropConfiguration" class="btn btn-danger">Drop it</button>
            @Html.Hidden("id", c.ID)
        </div>
    }
</div>
<div class="modal hide" id="edit_config">
    @using (Html.BeginForm())
    {
        <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal">
                ×</button>
            <h3>
                Edit Configuration</h3>
        </div>
        <div class="modal-body">
            @Html.TextArea("description", c.Description, new { placeholder = "Configuration Description" })
            <br />
            <span class="label">Flags</span>
            <br />
            <input name="flags" value="@string.Join(",", c.Flags)" type="text" maxlength="100" placeholder="Multiple options separated by commas ','" />
        </div>
        <div class="modal-footer">
            <a class="btn" data-dismiss="modal">Cancel</a> 
            <button type="submit" name="btn" value="UpdateConfiguration" class="btn btn-primary">Done</button>
            @Html.Hidden("id", c.ID)
        </div>
    }
</div>
<div class="modal hide" id="edit_property">
     @using (Html.BeginForm())
     {
        <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal">
                ×</button>
            <h3>
                Edit Property <code id="name"></code></h3>
        </div>
        <div class="modal-body">
            <label><input type="checkbox" name="isTrashed" /> <span class="label label-important">Trashed</span></label>
            <label>Value:</label>
            <textarea name="value" placeholder="Property value"></textarea>
            <br />
            <label>Description:</label>
            <textarea name="description" placeholder="Property description"></textarea>
            <br />
            @for (var i = 0; i < c.Flags.Count(); i++)
            { 
                <span class="label @label[i % 5]">@c.Flags.ElementAt(i)</span>
                <br />
                <textarea name="@Html.Raw("flag_" + c.Flags.ElementAt(i))" placeholder="Property value at @c.Flags.ElementAt(i) flag"></textarea>   
                <br />
            }
        </div>
        <div class="modal-footer">
            <a class="btn" data-dismiss="modal">Cancel</a> 
            <button type="submit" name="btn" value="UpdateProperty" class="btn btn-primary">Done</button>
            @Html.Hidden("name")
            @Html.Hidden("id", c.ID)
        </div>
     }
</div>

@section Bottom{
    @{
        var temp = properties.Select(o => new
        {
            name = o.Name,
            description = o.Description,
            isTrashed =o.Uncommitted().IsTrashed,
            value = o.Uncommitted().Value,
            flagValues = c.Flags.Select(p => new KeyValuePair<string, string>(p, o[p])).ToDictionary(p => p.Key, p => p.Value)
        }).ToDictionary(o => o.name, o => o);
    }
    <script type="text/javascript">
        var propertis = @Html.Raw(new CodeSharp.Core.Utils.Serializer().JsonSerialize(temp));
    </script>
    <script type="text/javascript">
        $(function () {
            $('div.span2').popover();
        });
        function edit(n) {
            var p = propertis[n];
            $('#edit_property #name').html(p.name);
            $('#edit_property input[name="isTrashed"]').attr('checked', p.isTrashed);
            $('#edit_property input[name="name"]').val(p.name);
            $('#edit_property textarea[name="value"]').text(p.value);
            $('#edit_property textarea[name="description"]').text(p.description == null ? '' : p.description);
            for (var k in p.flagValues)
                $('#edit_property textarea[name="flag_' + k + '"]').text(p.flagValues[k]);
            $('#edit_property').modal('show');
        }
        function check() {
            var b = $.trim($('input[name="name"]').val()) != '';
            $('.control-group')[b ? 'removeClass' : 'addClass']('error');
            return b;
        }
    </script>
}